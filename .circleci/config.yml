# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
jobs:
  analyze:
    docker:
      - image: cimg/openjdk:15.0.2

    description: Run Sonarqube scanner for code analysis
    parameters:
      organization:
        type: string
    host_url:
      type: string
    login:
      type: string
    projectKey:
      type: string
    projectBaseDir:
      type: string
      default: /root/circleci-build
    sources:
      type: string
      default: .
    github_oauth:
      type: string
    github_repository:
      type: string
    runner_opts:
      type: string
      default: '-Xms1024m -Xmx4096m'
    exclusions:
      type: string
      default: '**/*.yaml,**/*.yml'
    engine_version:
      type: string
      default: 4.2.0.1873
    
    steps:
    - run:
        name: Code analysis
        command: |
          export SONAR_RUNNER_OPTS="<< parameters.runner_opts >>"
          eval ./sonar-scanner-<< parameters.engine_version >>/bin/sonar-scanner \
          -Dsonar.organization=${<< parameters.organization >>} \
          -Dsonar.host.url=${<< parameters.host_url >>} \
          -Dsonar.login=${<< parameters.login >>} \
          -Dsonar.projectKey=${<< parameters.projectKey >>} \
          -Dsonar.projectBaseDir=<< parameters.projectBaseDir >> \
          -Dsonar.sources=<< parameters.sources >> \
          -Dsonar.github.oauth=${<< parameters.github_oauth >>} \
          -Dsonar.github.repository=${<< parameters.github_repository >>} \
          -Dsonar.exclusions="<< parameters.exclusions >>"
  build:
    docker:
      - image: cimg/openjdk:15.0.2


      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    working_directory: ~/repo


    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout


      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-


      - run: gradle dependencies


      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle.kts" }}


      # run tests!
    # - run: gradle test
  test:
    docker:
      - image: cimg/openjdk:15.0.2
    steps:
      - checkout
      - run: gradle test
  deploy:
    docker:
      - image: cimg/openjdk:15.0.2
    steps:
      - checkout
      - run: echo "Deploy"


workflows:
  analyze-build-test-validate-deploy:
    jobs:
      - analyze
      - build
      - test:
          requires:
            - build
      - validate:
          type: approval
          requires:
            - test
      - deploy:
          requires:
            - validate